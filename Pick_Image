package tj.khujand.permissionstest

import android.content.Intent
import android.graphics.Bitmap
import android.media.Image
import android.net.Uri
import android.os.Bundle
import android.os.Environment
import android.util.Log
import android.widget.ImageView
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.InputStream

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        gallery()


    }

    private fun gallery() {
        val intent = Intent()
        intent.type = "image/*"
        intent.action = Intent.ACTION_GET_CONTENT
        startActivityForResult(Intent.createChooser(intent, "Выберите фото"), 0)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == RESULT_OK) {
            if (data != null) {

                val uri: Uri? = data.data
//                        val uriFile: String = getPath(uri)!!
//                        val imageFile = File(uriFile)
                val parcelFileDescriptor =
                    this.contentResolver.openFileDescriptor(uri!!, "r", null)
                parcelFileDescriptor?.let {

                    val inputStream = FileInputStream(parcelFileDescriptor.fileDescriptor)
                    val imageFile = copyStreamToFile(inputStream)
                    val compressFile = (imageFile)
                    val pathCompressFile = compressFile?.absolutePath.toString()
                    val tvInfo= findViewById<TextView>(R.id.tvInfo)
                    val img= findViewById<ImageView>(R.id.ivImage)
                    tvInfo.text=pathCompressFile
                    img.setImageURI(Uri.fromFile(imageFile))
                    Log.e("onActivityResult: ", pathCompressFile)
                }


            }
        }
    }


    fun copyStreamToFile(inputStream: InputStream): File {
        val storeDirectory = this.getExternalFilesDir(Environment.DIRECTORY_DCIM) // DCIM folder
        val outputFile = File(storeDirectory, "image.jpg")
        inputStream.use { input ->
            val outputStream = FileOutputStream(outputFile)
            outputStream.use { output ->
                val buffer = ByteArray(4 * 1024) // buffer size
                while (true) {
                    val byteCount = input.read(buffer)
                    if (byteCount < 0) break
                    output.write(buffer, 0, byteCount)
                }
                output.flush()
            }
        }
        return outputFile
    }
}
