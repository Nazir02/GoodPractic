package tj.khujand.myapplication

import android.content.Context
import android.os.Bundle
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import android.content.ContentValues
import android.net.Uri
import android.os.Build
import android.os.Environment
import android.provider.MediaStore
import java.io.OutputStream

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        val fileName = "example_file.txt"
        val fileContent = "Hello, this file will remain after app deletion!".toByteArray()

        saveFileToDownloads(this, fileName, fileContent)
    }
    fun saveFileToDownloads(context: Context, fileName: String, fileContent: ByteArray) {
        val contentResolver = context.contentResolver
        val contentUri: Uri = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            MediaStore.Downloads.EXTERNAL_CONTENT_URI
        } else {
            Uri.parse(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).path)
        }

        val contentValues = ContentValues().apply {
            put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)
            put(MediaStore.MediaColumns.MIME_TYPE, "application/octet-stream")
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS)
            }
        }

        val fileUri = contentResolver.insert(contentUri, contentValues)

        if (fileUri != null) {
            contentResolver.openOutputStream(fileUri).use { outputStream ->
                if (outputStream != null) {
                    outputStream.write(fileContent)
                    outputStream.flush()
                    println("Файл успешно сохранен: $fileUri")
                } else {
                    println("Ошибка: невозможно открыть OutputStream")
                }
            }
        } else {
            println("Ошибка: не удалось создать URI для файла")
        }
    }
}
